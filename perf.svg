<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="246.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="229" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="229" > </text>
<g id="frames">
<g >
<title>[libm.so.6] (10,307,115 samples, 0.61%)</title><rect x="205.7" y="133" width="7.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="208.66" y="143.5" ></text>
</g>
<g >
<title>cfree (16,136,855 samples, 0.95%)</title><rect x="593.7" y="117" width="11.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="596.75" y="127.5" ></text>
</g>
<g >
<title>Task::add_city_to_path (2,925,700 samples, 0.17%)</title><rect x="407.2" y="133" width="2.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="410.18" y="143.5" ></text>
</g>
<g >
<title>Task::get_cities_left (3,003,213 samples, 0.18%)</title><rect x="419.2" y="133" width="2.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="422.20" y="143.5" ></text>
</g>
<g >
<title>malloc (39,822,920 samples, 2.35%)</title><rect x="59.2" y="133" width="27.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="62.18" y="143.5" >m..</text>
</g>
<g >
<title>[libc.so.6] (4,109,148 samples, 0.24%)</title><rect x="392.2" y="149" width="2.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="395.17" y="159.5" ></text>
</g>
<g >
<title>malloc (16,721,343 samples, 0.99%)</title><rect x="914.6" y="101" width="11.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="917.61" y="111.5" ></text>
</g>
<g >
<title>malloc (1,024,924 samples, 0.06%)</title><rect x="605.0" y="117" width="0.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="607.98" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (864,801 samples, 0.05%)</title><rect x="183.5" y="133" width="0.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="186.55" y="143.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,306,061 samples, 0.08%)</title><rect x="257.5" y="133" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.52" y="143.5" ></text>
</g>
<g >
<title>__lgamma_r_finite (7,149,287 samples, 0.42%)</title><rect x="712.8" y="69" width="5.0" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="715.78" y="79.5" ></text>
</g>
<g >
<title>__lgamma_r_finite (1,733,432 samples, 0.10%)</title><rect x="256.3" y="101" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="259.32" y="111.5" ></text>
</g>
<g >
<title>[unknown] (598,380 samples, 0.04%)</title><rect x="204.7" y="69" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="207.75" y="79.5" ></text>
</g>
<g >
<title>[libc.so.6] (11,008,714 samples, 0.65%)</title><rect x="47.9" y="133" width="7.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="50.90" y="143.5" ></text>
</g>
<g >
<title>[unknown] (933,643 samples, 0.06%)</title><rect x="126.7" y="85" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="129.67" y="95.5" ></text>
</g>
<g >
<title>[unknown] (134,050,068 samples, 7.91%)</title><rect x="1075.1" y="133" width="93.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1078.09" y="143.5" >[unknown]</text>
</g>
<g >
<title>cfree (121,735,108 samples, 7.18%)</title><rect x="439.0" y="117" width="84.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="442.04" y="127.5" >cfree</text>
</g>
<g >
<title>[libm.so.6] (31,284,152 samples, 1.85%)</title><rect x="611.0" y="101" width="21.8" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="614.04" y="111.5" >[..</text>
</g>
<g >
<title>ThreadParams::decrement_paths_left (17,958,932 samples, 1.06%)</title><rect x="127.3" y="165" width="12.5" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="130.32" y="175.5" ></text>
</g>
<g >
<title>__lgamma_r_finite (2,001,145 samples, 0.12%)</title><rect x="717.8" y="85" width="1.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="720.76" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (30,945,566 samples, 1.83%)</title><rect x="258.4" y="165" width="21.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="261.43" y="175.5" >[..</text>
</g>
<g >
<title>Task::Task (5,964,598 samples, 0.35%)</title><rect x="403.0" y="133" width="4.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="406.03" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,197,218 samples, 1.13%)</title><rect x="73.5" y="117" width="13.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="76.53" y="127.5" ></text>
</g>
<g >
<title>Path::get_weight (3,802,019 samples, 0.22%)</title><rect x="86.9" y="165" width="2.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="89.90" y="175.5" ></text>
</g>
<g >
<title>[unknown] (922,328 samples, 0.05%)</title><rect x="977.1" y="37" width="0.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="980.12" y="47.5" ></text>
</g>
<g >
<title>[unknown] (1,449,431 samples, 0.09%)</title><rect x="85.9" y="85" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="88.89" y="95.5" ></text>
</g>
<g >
<title>[unknown] (764,018 samples, 0.05%)</title><rect x="379.6" y="85" width="0.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="382.64" y="95.5" ></text>
</g>
<g >
<title>__mprotect (816,291 samples, 0.05%)</title><rect x="977.8" y="53" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="980.76" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (21,241,115 samples, 1.25%)</title><rect x="366.5" y="101" width="14.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="369.45" y="111.5" ></text>
</g>
<g >
<title>__gamma_r_finite (1,087,664 samples, 0.06%)</title><rect x="157.2" y="149" width="0.7" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="160.17" y="159.5" ></text>
</g>
<g >
<title>cfree (16,891,520 samples, 1.00%)</title><rect x="43.8" y="149" width="11.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="46.81" y="159.5" ></text>
</g>
<g >
<title>[libm.so.6] (73,827,574 samples, 4.36%)</title><rect x="666.4" y="85" width="51.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="669.36" y="95.5" >[libm..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (4,752,927 samples, 0.28%)</title><rect x="1168.4" y="149" width="3.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1171.40" y="159.5" ></text>
</g>
<g >
<title>malloc (3,814,700 samples, 0.23%)</title><rect x="55.6" y="149" width="2.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="58.56" y="159.5" ></text>
</g>
<g >
<title>operator new (3,776,001 samples, 0.22%)</title><rect x="1187.4" y="165" width="2.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1190.37" y="175.5" ></text>
</g>
<g >
<title>operator new (10,840,098 samples, 0.64%)</title><rect x="1171.7" y="149" width="7.6" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1174.71" y="159.5" ></text>
</g>
<g >
<title>[unknown] (715,341 samples, 0.04%)</title><rect x="205.2" y="69" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="208.17" y="79.5" ></text>
</g>
<g >
<title>ThreadParams::decrement_paths_left (79,402,496 samples, 4.68%)</title><rect x="523.8" y="133" width="55.3" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="526.79" y="143.5" >Threa..</text>
</g>
<g >
<title>Task::extract_city_to_visit (21,598,247 samples, 1.27%)</title><rect x="96.3" y="165" width="15.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="99.33" y="175.5" ></text>
</g>
<g >
<title>Path::add (11,500,660 samples, 0.68%)</title><rect x="395.0" y="133" width="8.0" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="398.03" y="143.5" ></text>
</g>
<g >
<title>operator delete (3,173,597 samples, 0.19%)</title><rect x="1032.5" y="117" width="2.2" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1035.51" y="127.5" ></text>
</g>
<g >
<title>Task::Task (372,306,008 samples, 21.96%)</title><rect x="719.2" y="117" width="259.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="722.15" y="127.5" >Task::Task</text>
</g>
<g >
<title>[unknown] (1,608,180 samples, 0.09%)</title><rect x="378.5" y="69" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="381.52" y="79.5" ></text>
</g>
<g >
<title>malloc (9,103,179 samples, 0.54%)</title><rect x="174.9" y="149" width="6.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="177.88" y="159.5" ></text>
</g>
<g >
<title>[unknown] (976,901,848 samples, 57.63%)</title><rect x="395.0" y="149" width="680.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="398.03" y="159.5" >[unknown]</text>
</g>
<g >
<title>[libc.so.6] (85,334,330 samples, 5.03%)</title><rect x="1109.0" y="69" width="59.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.00" y="79.5" >[libc...</text>
</g>
<g >
<title>operator delete (2,034,804 samples, 0.12%)</title><rect x="1186.0" y="165" width="1.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1188.95" y="175.5" ></text>
</g>
<g >
<title>Task::~Task (15,693,395 samples, 0.93%)</title><rect x="381.2" y="149" width="11.0" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="384.24" y="159.5" ></text>
</g>
<g >
<title>malloc (60,556,039 samples, 3.57%)</title><rect x="936.2" y="85" width="42.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="939.17" y="95.5" >mal..</text>
</g>
<g >
<title>Task::Task (4,748,880 samples, 0.28%)</title><rect x="89.5" y="165" width="3.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="92.54" y="175.5" ></text>
</g>
<g >
<title>[unknown] (715,341 samples, 0.04%)</title><rect x="205.2" y="37" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="208.17" y="47.5" ></text>
</g>
<g >
<title>__gamma_r_finite (5,349,911 samples, 0.32%)</title><rect x="590.0" y="117" width="3.7" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="593.02" y="127.5" ></text>
</g>
<g >
<title>__mprotect (933,643 samples, 0.06%)</title><rect x="126.7" y="101" width="0.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="129.67" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,087,959 samples, 0.06%)</title><rect x="1108.2" y="69" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1111.24" y="79.5" ></text>
</g>
<g >
<title>[libm.so.6] (45,756,184 samples, 2.70%)</title><rect x="680.9" y="69" width="31.9" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="683.93" y="79.5" >[l..</text>
</g>
<g >
<title>cfree (85,334,330 samples, 5.03%)</title><rect x="1109.0" y="101" width="59.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1112.00" y="111.5" >cfree</text>
</g>
<g >
<title>malloc (85,614,021 samples, 5.05%)</title><rect x="321.6" y="117" width="59.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="324.64" y="127.5" >malloc</text>
</g>
<g >
<title>operator new (9,205,207 samples, 0.54%)</title><rect x="1034.7" y="117" width="6.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1037.72" y="127.5" ></text>
</g>
<g >
<title>[libc.so.6] (85,334,330 samples, 5.03%)</title><rect x="1109.0" y="53" width="59.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.00" y="63.5" >[libc...</text>
</g>
<g >
<title>cfree (24,361,465 samples, 1.44%)</title><rect x="157.9" y="149" width="17.0" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="160.92" y="159.5" ></text>
</g>
<g >
<title>Task::~Task (6,245,925 samples, 0.37%)</title><rect x="118.5" y="165" width="4.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="121.52" y="175.5" ></text>
</g>
<g >
<title>bool moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::push&lt; (1,088,733 samples, 0.06%)</title><rect x="1179.3" y="165" width="0.7" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1182.28" y="175.5" ></text>
</g>
<g >
<title>__gamma_r_finite (124,014,761 samples, 7.32%)</title><rect x="632.8" y="101" width="86.4" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="635.82" y="111.5" >__gamma_r_..</text>
</g>
<g >
<title>ThreadWorker::thread_work (201,236,408 samples, 11.87%)</title><rect x="579.1" y="133" width="140.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="582.06" y="143.5" >ThreadWorker::thr..</text>
</g>
<g >
<title>[libc.so.6] (6,350,868 samples, 0.37%)</title><rect x="82.5" y="101" width="4.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="85.48" y="111.5" ></text>
</g>
<g >
<title>all (1,695,061,532 samples, 100%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,308,903 samples, 0.08%)</title><rect x="257.5" y="165" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.52" y="175.5" ></text>
</g>
<g >
<title>[unknown] (786,186 samples, 0.05%)</title><rect x="379.1" y="53" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="382.09" y="63.5" ></text>
</g>
<g >
<title>__mprotect (715,341 samples, 0.04%)</title><rect x="205.2" y="101" width="0.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="208.17" y="111.5" ></text>
</g>
<g >
<title>bool moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::push&lt; (5,629,299 samples, 0.33%)</title><rect x="123.4" y="149" width="3.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="126.40" y="159.5" ></text>
</g>
<g >
<title>cfree (22,590,242 samples, 1.33%)</title><rect x="1041.1" y="133" width="15.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1044.13" y="143.5" ></text>
</g>
<g >
<title>ThreadParams::get_shortest_path_weight (6,993,351 samples, 0.41%)</title><rect x="142.1" y="165" width="4.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="145.09" y="175.5" ></text>
</g>
<g >
<title>[unknown] (598,380 samples, 0.04%)</title><rect x="204.7" y="85" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="207.75" y="95.5" ></text>
</g>
<g >
<title>tgammaf32x (157,980,301 samples, 9.32%)</title><rect x="609.2" y="117" width="110.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="612.17" y="127.5" >tgammaf32x</text>
</g>
<g >
<title>[libc.so.6] (12,188,512 samples, 0.72%)</title><rect x="166.4" y="133" width="8.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="169.40" y="143.5" ></text>
</g>
<g >
<title>malloc (18,890,467 samples, 1.11%)</title><rect x="295.7" y="133" width="13.1" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="298.66" y="143.5" ></text>
</g>
<g >
<title>[libc.so.6] (85,334,330 samples, 5.03%)</title><rect x="1109.0" y="85" width="59.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1112.00" y="95.5" >[libc...</text>
</g>
<g >
<title>[libc.so.6] (598,380 samples, 0.04%)</title><rect x="204.7" y="101" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="207.75" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (64,661,385 samples, 3.81%)</title><rect x="978.3" y="117" width="45.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="981.33" y="127.5" >[lib..</text>
</g>
<g >
<title>ThreadParams::get_next_task (3,260,216 samples, 0.19%)</title><rect x="139.8" y="165" width="2.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="142.82" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,825,486 samples, 0.17%)</title><rect x="125.4" y="117" width="1.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="128.35" y="127.5" ></text>
</g>
<g >
<title>Task::Task (145,465,848 samples, 8.58%)</title><rect x="280.0" y="149" width="101.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="282.98" y="159.5" >Task::Task</text>
</g>
<g >
<title>[libc.so.6] (8,232,690 samples, 0.49%)</title><rect x="199.9" y="117" width="5.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="202.93" y="127.5" ></text>
</g>
<g >
<title>[unknown] (715,341 samples, 0.04%)</title><rect x="205.2" y="53" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="208.17" y="63.5" ></text>
</g>
<g >
<title>operator new (811,949 samples, 0.05%)</title><rect x="1073.8" y="133" width="0.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1076.76" y="143.5" ></text>
</g>
<g >
<title>[unknown] (48,715,738 samples, 2.87%)</title><rect x="1075.1" y="117" width="33.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1078.09" y="127.5" >[u..</text>
</g>
<g >
<title>[libc.so.6] (94,462,278 samples, 5.57%)</title><rect x="458.0" y="101" width="65.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="461.03" y="111.5" >[libc.s..</text>
</g>
<g >
<title>malloc (30,904,081 samples, 1.82%)</title><rect x="184.1" y="133" width="21.6" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="187.15" y="143.5" >m..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (526,374 samples, 0.03%)</title><rect x="258.1" y="69" width="0.3" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="261.07" y="79.5" ></text>
</g>
<g >
<title>malloc (3,912,832 samples, 0.23%)</title><rect x="606.4" y="101" width="2.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="609.45" y="111.5" ></text>
</g>
<g >
<title>operator delete (24,284,908 samples, 1.43%)</title><rect x="1056.9" y="133" width="16.9" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1059.86" y="143.5" ></text>
</g>
<g >
<title>operator new (41,196,111 samples, 2.43%)</title><rect x="58.2" y="149" width="28.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="61.22" y="159.5" >op..</text>
</g>
<g >
<title>[unknown] (1,291,813,332 samples, 76.21%)</title><rect x="280.0" y="165" width="899.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="282.98" y="175.5" >[unknown]</text>
</g>
<g >
<title>Task::~Task (147,231,408 samples, 8.69%)</title><rect x="421.3" y="133" width="102.5" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="424.29" y="143.5" >Task::~Task</text>
</g>
<g >
<title>[libc.so.6] (37,200,907 samples, 2.19%)</title><rect x="888.7" y="85" width="25.9" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="891.72" y="95.5" >[..</text>
</g>
<g >
<title>[unknown] (462,523,301 samples, 27.29%)</title><rect x="719.2" y="133" width="321.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="722.15" y="143.5" >[unknown]</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,306,061 samples, 0.08%)</title><rect x="257.5" y="117" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.52" y="127.5" ></text>
</g>
<g >
<title>[libm.so.6] (38,034,636 samples, 2.24%)</title><rect x="231.0" y="117" width="26.5" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="234.04" y="127.5" >[..</text>
</g>
<g >
<title>bool moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::pop&lt;Task*&gt; (43,809,962 samples, 2.58%)</title><rect x="1078.5" y="101" width="30.5" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1081.50" y="111.5" >bo..</text>
</g>
<g >
<title>[unknown] (715,341 samples, 0.04%)</title><rect x="205.2" y="85" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="208.17" y="95.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,273,569 samples, 0.08%)</title><rect x="257.5" y="85" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.54" y="95.5" ></text>
</g>
<g >
<title>operator new (5,000,247 samples, 0.29%)</title><rect x="605.7" y="117" width="3.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="608.69" y="127.5" ></text>
</g>
<g >
<title>cfree (5,299,569 samples, 0.31%)</title><rect x="1180.0" y="165" width="3.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1183.04" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (751,513 samples, 0.04%)</title><rect x="321.1" y="117" width="0.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="324.12" y="127.5" ></text>
</g>
<g >
<title>tgammaf32x (74,494,581 samples, 4.39%)</title><rect x="205.7" y="149" width="51.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="208.66" y="159.5" >tgamm..</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::get_or_add_implicit_producer (2,550,202 samples, 0.15%)</title><rect x="1184.2" y="165" width="1.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1187.18" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (10,428,784 samples, 0.62%)</title><rect x="597.7" y="101" width="7.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="600.72" y="111.5" ></text>
</g>
<g >
<title>__mprotect (1,533,768 samples, 0.09%)</title><rect x="380.2" y="85" width="1.0" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="383.17" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (3,116,766 samples, 0.18%)</title><rect x="83.7" y="85" width="2.2" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="86.72" y="95.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,772,918 samples, 0.10%)</title><rect x="155.9" y="149" width="1.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="158.93" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (44,615,877 samples, 2.63%)</title><rect x="1137.3" y="37" width="31.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1140.34" y="47.5" >[l..</text>
</g>
<g >
<title>ThreadWorker::thread_work (158,822,768 samples, 9.37%)</title><rect x="147.0" y="165" width="110.5" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="149.96" y="175.5" >ThreadWorker:..</text>
</g>
<g >
<title>ThreadParams::add_task (6,394,067 samples, 0.38%)</title><rect x="122.9" y="165" width="4.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="125.87" y="175.5" ></text>
</g>
<g >
<title>operator new (74,802,426 samples, 4.41%)</title><rect x="926.3" y="101" width="52.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="929.25" y="111.5" >opera..</text>
</g>
<g >
<title>Task::add_city_to_path (5,002,783 samples, 0.30%)</title><rect x="92.9" y="165" width="3.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="95.85" y="175.5" ></text>
</g>
<g >
<title>main (1,695,061,532 samples, 100.00%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >main</text>
</g>
<g >
<title>Path::add (110,463,670 samples, 6.52%)</title><rect x="10.0" y="165" width="76.9" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >Path::add</text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::~ImplicitProducer (134,050,068 samples, 7.91%)</title><rect x="1075.1" y="149" width="93.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1078.09" y="159.5" >moodycamel:..</text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,273,569 samples, 0.08%)</title><rect x="257.5" y="101" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.54" y="111.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,642,544 samples, 1.16%)</title><rect x="964.7" y="69" width="13.6" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="967.65" y="79.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (1,308,902 samples, 0.08%)</title><rect x="257.5" y="149" width="0.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="260.52" y="159.5" ></text>
</g>
<g >
<title>[libc.so.6] (2,007,861 samples, 0.12%)</title><rect x="976.4" y="53" width="1.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="979.36" y="63.5" ></text>
</g>
<g >
<title>tgamma@plt (1,088,944 samples, 0.06%)</title><rect x="1074.3" y="133" width="0.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1077.33" y="143.5" ></text>
</g>
<g >
<title>cfree (11,228,235 samples, 0.66%)</title><rect x="1023.3" y="117" width="7.9" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1026.34" y="127.5" ></text>
</g>
<g >
<title>moodycamel::ConcurrentQueue&lt;Task*, moodycamel::ConcurrentQueueDefaultTraits&gt;::ImplicitProducer::~ImplicitProducer (85,334,330 samples, 5.03%)</title><rect x="1109.0" y="117" width="59.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1112.00" y="127.5" >moodyc..</text>
</g>
<g >
<title>[libc.so.6] (2,265,617 samples, 0.13%)</title><rect x="378.1" y="85" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="381.06" y="95.5" ></text>
</g>
<g >
<title>Task::extract_city_to_visit (14,338,021 samples, 0.85%)</title><rect x="409.2" y="133" width="10.0" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="412.22" y="143.5" ></text>
</g>
<g >
<title>operator new (35,112,041 samples, 2.07%)</title><rect x="181.2" y="149" width="24.5" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="184.22" y="159.5" >o..</text>
</g>
<g >
<title>memcpy@plt (653,896 samples, 0.04%)</title><rect x="1183.7" y="165" width="0.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1186.72" y="175.5" ></text>
</g>
<g >
<title>malloc (3,514,177 samples, 0.21%)</title><rect x="124.9" y="133" width="2.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="127.87" y="143.5" ></text>
</g>
<g >
<title>ThreadParams::get_next_task (4,905,776 samples, 0.29%)</title><rect x="1075.1" y="101" width="3.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1078.09" y="111.5" ></text>
</g>
<g >
<title>[unknown] (816,291 samples, 0.05%)</title><rect x="977.8" y="37" width="0.5" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="980.76" y="47.5" ></text>
</g>
<g >
<title>__gamma_r_finite (64,187,466 samples, 3.79%)</title><rect x="212.8" y="133" width="44.7" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="215.84" y="143.5" >__ga..</text>
</g>
<g >
<title>operator new (104,039,068 samples, 6.14%)</title><rect x="308.8" y="133" width="72.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="311.81" y="143.5" >operator..</text>
</g>
<g >
<title>[libm.so.6] (30,367,418 samples, 1.79%)</title><rect x="235.2" y="101" width="21.1" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="238.18" y="111.5" ></text>
</g>
<g >
<title>cfree (13,516,769 samples, 0.80%)</title><rect x="382.8" y="133" width="9.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="385.76" y="143.5" ></text>
</g>
<g >
<title>cfree (73,556,974 samples, 4.34%)</title><rect x="863.4" y="101" width="51.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="866.41" y="111.5" >cfree</text>
</g>
<g >
<title>memcpy@plt (1,948,869 samples, 0.11%)</title><rect x="1031.2" y="117" width="1.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1034.16" y="127.5" ></text>
</g>
<g >
<title>Task::get_cities_left (10,272,739 samples, 0.61%)</title><rect x="111.4" y="165" width="7.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="114.37" y="175.5" ></text>
</g>
<g >
<title>[libc.so.6] (12,428,089 samples, 0.73%)</title><rect x="383.5" y="117" width="8.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="386.51" y="127.5" ></text>
</g>
<g >
<title>[unknown] (1,533,768 samples, 0.09%)</title><rect x="380.2" y="69" width="1.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="383.17" y="79.5" ></text>
</g>
<g >
<title>cfree (1,087,959 samples, 0.06%)</title><rect x="1108.2" y="85" width="0.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1111.24" y="95.5" ></text>
</g>
</g>
</svg>
